[{"/home/mate/Advanced/hangman-using-redux/src/index.js":"1","/home/mate/Advanced/hangman-using-redux/src/App.js":"2","/home/mate/Advanced/hangman-using-redux/src/components/Header.js":"3","/home/mate/Advanced/hangman-using-redux/src/components/Content.js":"4","/home/mate/Advanced/hangman-using-redux/src/context/VocabularyContext.js":"5","/home/mate/Advanced/hangman-using-redux/src/context/GameStatusContext.js":"6","/home/mate/Advanced/hangman-using-redux/src/context/DrawingContext.js":"7","/home/mate/Advanced/hangman-using-redux/src/context/LettersContext.js":"8","/home/mate/Advanced/hangman-using-redux/src/components/Game.js":"9","/home/mate/Advanced/hangman-using-redux/src/components/Vocabulary.js":"10","/home/mate/Advanced/hangman-using-redux/src/components/Drawing.js":"11","/home/mate/Advanced/hangman-using-redux/src/components/GameEndingFeedback.js":"12","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetters.js":"13","/home/mate/Advanced/hangman-using-redux/src/components/letters/GuessedLetter.js":"14","/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetters.js":"15","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetter.js":"16","/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetter.js":"17","/home/mate/Advanced/hangman-using-redux/src/app/store.js":"18","/home/mate/Advanced/hangman-using-redux/src/features/vocabulary/vocabularySlice.js":"19","/home/mate/Advanced/hangman-using-redux/src/features/wordsSlice.js":"20","/home/mate/Advanced/hangman-using-redux/src/features/gameStatusSlice.js":"21","/home/mate/Advanced/hangman-using-redux/src/features/letters/correctLettersSlice.js":"22","/home/mate/Advanced/hangman-using-redux/src/features/letters/wrongLettersSlice.js":"23","/home/mate/Advanced/hangman-using-redux/src/features/letters/isLastlyGuessedLetterWrongSlice.js":"24","/home/mate/Advanced/hangman-using-redux/src/components/WordGenerator.js":"25"},{"size":292,"mtime":1609926411105,"results":"26","hashOfConfig":"27"},{"size":1050,"mtime":1609858891245,"results":"28","hashOfConfig":"27"},{"size":1210,"mtime":1609858891245,"results":"29","hashOfConfig":"27"},{"size":614,"mtime":1609858891245,"results":"30","hashOfConfig":"27"},{"size":1426,"mtime":1610368614236,"results":"31","hashOfConfig":"27"},{"size":1009,"mtime":1610363002917,"results":"32","hashOfConfig":"27"},{"size":518,"mtime":1609858891245,"results":"33","hashOfConfig":"27"},{"size":3041,"mtime":1610362821053,"results":"34","hashOfConfig":"27"},{"size":1370,"mtime":1609858891245,"results":"35","hashOfConfig":"27"},{"size":3075,"mtime":1610370167467,"results":"36","hashOfConfig":"27"},{"size":4774,"mtime":1610363056135,"results":"37","hashOfConfig":"27"},{"size":2242,"mtime":1610369758732,"results":"38","hashOfConfig":"27"},{"size":741,"mtime":1610360677731,"results":"39","hashOfConfig":"27"},{"size":1963,"mtime":1609925966280,"results":"40","hashOfConfig":"27"},{"size":1078,"mtime":1610363022567,"results":"41","hashOfConfig":"27"},{"size":477,"mtime":1609858891245,"results":"42","hashOfConfig":"27"},{"size":836,"mtime":1609858891245,"results":"43","hashOfConfig":"27"},{"size":807,"mtime":1610362536131,"results":"44","hashOfConfig":"27"},{"size":414,"mtime":1609929889183,"results":"45","hashOfConfig":"27"},{"size":696,"mtime":1610355166819,"results":"46","hashOfConfig":"27"},{"size":594,"mtime":1610356602330,"results":"47","hashOfConfig":"27"},{"size":411,"mtime":1610360612262,"results":"48","hashOfConfig":"27"},{"size":489,"mtime":1610361085610,"results":"49","hashOfConfig":"27"},{"size":484,"mtime":1610362837683,"results":"50","hashOfConfig":"27"},{"size":451,"mtime":1610369746779,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"u7h8ov",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mate/Advanced/hangman-using-redux/src/index.js",[],["106","107"],"/home/mate/Advanced/hangman-using-redux/src/App.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Header.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Content.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/VocabularyContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/GameStatusContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/DrawingContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/LettersContext.js",["108"],"import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {setCorrectLetters} from '../features/letters/correctLettersSlice';\nimport {addWrongLetter, clearWrongLetters} from '../features/letters/wrongLettersSlice';\nimport {setIsLastlyGuessedLetterWrong} from '../features/letters/isLastlyGuessedLetterWrongSlice';\n\nexport const LettersContext = React.createContext();\n\nexport const LettersProvider = (props) => {\n\n    const generatedWord = useSelector(state => state.words.generatedWord);\n    const correctLetters = useSelector(state => state.correctLetters);\n    const wrongLetters = useSelector(state => state.wrongLetters);\n    const isLastlyGuessedLetterWrong = useSelector(state => state.isLastlyGuessedLetterWrong)\n    const dispatch = useDispatch();\n\n    const checkGuessedLetterWasAlreadyGuessed = (e) => {\n        const guessedLetter = e.target.getAttribute(\"data-guessed-letter\");\n        const isAlreadyGuessed = wrongLetters.includes(guessedLetter) || correctLetters.includes(guessedLetter);\n        if (!isAlreadyGuessed) \n            saveGuessedLetter(guessedLetter);\n    }\n\n    const saveGuessedLetter = (guessedLetter) => {\n        let correctLettersToBeUpdated = [...correctLetters];\n        const guessedLetterIsWrong = updateCorrectLettersWhileSettingGuessedLetterIsWrong(\n                                                                correctLettersToBeUpdated, \n                                                                guessedLetter);                                      \n        if (guessedLetterIsWrong) {\n            dispatch(addWrongLetter(guessedLetter));\n            dispatch(setIsLastlyGuessedLetterWrong(true));  \n        } else {\n            dispatch(setCorrectLetters(correctLettersToBeUpdated));\n            dispatch(setIsLastlyGuessedLetterWrong(false));\n        }\n    }\n\n    const updateCorrectLettersWhileSettingGuessedLetterIsWrong = (correctLettersToBeUpdated, guessedLetter) => {\n        let guessedLetterIsWrong = true;\n        for (let i = 0; i < generatedWord.length; i++) {\n            if (generatedWord.charAt(i).toLowerCase() === guessedLetter) {\n                correctLettersToBeUpdated[i] = generatedWord.charAt(i);\n                guessedLetterIsWrong = false;\n            }\n        }\n        return guessedLetterIsWrong;\n    }\n\n    useEffect(() => {\n        dispatch(setCorrectLetters(createArrayContainingNullsWithLengthOf(generatedWord.length)));\n        dispatch(clearWrongLetters());\n    }, [generatedWord])\n\n    const createArrayContainingNullsWithLengthOf = (length) => {\n        let array = [];\n        for (let i = 0; i < length; i++) {\n            array[i] = null;\n        }\n        return array;\n    }\n\n    return (\n        <LettersContext.Provider value={{\n            checkGuessedLetterWasAlreadyGuessed,\n            correctLetters,\n            wrongLetters,\n            isLastlyGuessedLetterWrong,\n            setIsLastlyGuessedLetterWrong\n        }} >\n            {props.children}\n        </LettersContext.Provider>\n    );\n};\n","/home/mate/Advanced/hangman-using-redux/src/components/Game.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Vocabulary.js",["109"],"/home/mate/Advanced/hangman-using-redux/src/components/Drawing.js",["110","111","112","113"],"import React, {useContext, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {DrawingContext} from '../context/DrawingContext';\nimport {useLocation} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setIsEndOfGame} from '../features/gameStatusSlice';\nimport {setIsLastlyGuessedLetterWrong} from '../features/letters/isLastlyGuessedLetterWrongSlice';\n\nconst Drawing = () => {\n\n\n    const {drawingParts, indexOfDrawingParts, \n        setIndexOfDrawingParts} = useContext(DrawingContext);\n\n    const generatedWord = useSelector(state => state.words.generatedWord);\n    const wordBeforeVisitingVocabularies = useSelector(state => state.words.wordBeforeVisitingVocabularies);\n    const wrongLetters = useSelector(state => state.wrongLetters);\n    const isLastlyGuessedLetterWrong = useSelector(state => state.isLastlyGuessedLetterWrong);\n    const isEndOfGame = useSelector(state => state.gameStatus.isEndOfGame);\n    \n    const dispatch = useDispatch();\n\n    let location = useLocation();\n    let currentPath = location.pathname;\n\n    useEffect(() => {\n        return () => {\n            dispatch(setIsLastlyGuessedLetterWrong(false));\n        }\n    }, [])\n    \n\n    useEffect(() => {\n        draw();\n    }, [drawingParts, wrongLetters, isLastlyGuessedLetterWrong, \n        isEndOfGame, setIsEndOfGame, setIsLastlyGuessedLetterWrong])\n\n    const draw = () => {\n        if (!isEndOfGame && isLastlyGuessedLetterWrong) {\n            drawingParts[indexOfDrawingParts].classList.add(\"draw\");\n            if (drawingParts[indexOfDrawingParts + 1] === undefined) {\n                dispatch(setIsEndOfGame(true));\n                dispatch(setIsLastlyGuessedLetterWrong(false));\n            } else {\n                setIndexOfDrawingParts(index => index + 1);\n            }\n        }\n    }\n\n\n    useEffect(() => {\n\n        clearDrawing();\n    }, [generatedWord])\n\n    const clearDrawing = () => {\n        console.log(generatedWord)\n        console.log(wordBeforeVisitingVocabularies)\n        if (wordBeforeVisitingVocabularies !== generatedWord) {\n            for (let i = 0; i < drawingParts.length; i++) {\n                drawingParts[i].classList.remove(\"draw\");\n            setIndexOfDrawingParts(0);\n            }\n        }\n    }\n    \n\n    useEffect(() => {\n        redraw();\n    }, [currentPath])\n\n    const redraw = () => {\n        if (currentPath === \"/\" && wordBeforeVisitingVocabularies === generatedWord) {\n            for (let i = 0; i < indexOfDrawingParts; i++) {\n                drawingParts[i].classList.add(\"draw\");\n            }\n            setIndexOfDrawingParts(indexOfDrawingParts);\n        }\n    } \n\n\n    return <StyleWrapper id=\"drawing\" className=\"styled-div\">\n                <svg height=\"250\" width=\"100%\" id=\"drawing-parts\">\n                    <g id=\"gallows\">\n                        <line x1=\"10\" y1=\"230\" x2=\"270\" y2=\"230\" className=\"drawing-part\"/>\n                        <line x1=\"100\" y1=\"230\" x2=\"100\" y2=\"20\" className=\"drawing-part\"/>\n                        <line x1=\"100\" y1=\"20\" x2=\"200\" y2=\"20\" className=\"drawing-part\"/>\n                        <line id=\"rope\" x1=\"200\" y1=\"20\" x2=\"200\" y2=\"60\" className=\"drawing-part\"/>\n                    </g>\n                    <g id=\"body\">\n                        <circle cx=\"200\" cy=\"80\" r=\"20\" stroke=\"white\" strokeWidth=\"4\" fill=\"white\" className=\"drawing-part\"/>\n                        <line x1=\"200\" y1=\"100\" x2=\"200\" y2=\"150\" className=\"drawing-part\"/>\n                        <line id=\"armL\" x1=\"200\" y1=\"120\" x2=\"170\" y2=\"140\" className=\"drawing-part\"/>\n                        <line id=\"armR\" x1=\"200\" y1=\"120\" x2=\"230\" y2=\"140\" className=\"drawing-part\"/>\n                        <line id=\"legL\" x1=\"200\" y1=\"150\" x2=\"180\" y2=\"190\" className=\"drawing-part\"/>\n                        <line id=\"legR\" x1=\"200\" y1=\"150\" x2=\"220\" y2=\"190\" className=\"drawing-part\"/>\n                    </g>\n                </svg>\n    </StyleWrapper>\n}\n\nexport default Drawing;\n\nconst StyleWrapper = styled.div`\n    flex: 5;\n    border-top: 1px solid white;\n    border-bottom: 1px solid white;\n    margin: 3% 0;\n\n    svg {\n        margin: 0 auto;\n    }\n    \n    line {\n        stroke: white;\n        stroke-width: 4;\n    }\n\n    .drawing-part {\n        visibility: hidden;\n    }\n    \n    .draw {\n        visibility: visible;\n    }\n\n    @media screen and (min-width: 540px) {\n        svg {\n            box-sizing: content-box;\n            width: 50%;\n            padding: 10% 0 0 20%;\n        }\n    }\n\n    @media screen and (min-width: 992px) {\n        border-top: none;\n        border-bottom: none;\n        position: relative;\n\n        svg {\n            box-sizing: content-box;\n            width: 50%;\n            padding: 15% 0 0 40%;\n        }\n    }\n`;","/home/mate/Advanced/hangman-using-redux/src/components/GameEndingFeedback.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetters.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/GuessedLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetters.js",["114"],"import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport {v4 as uuidv4} from 'uuid';\nimport CorrectLetter from './CorrectLetter';\nimport {setIsPlayerWon, setIsEndOfGame} from '../../features/gameStatusSlice';\nimport {useDispatch, useSelector} from 'react-redux';\n\nconst CorrectLetters = () => {\n\n    const correctLetters = useSelector(state => state.correctLetters)\n    const dispatch = useDispatch();\n\n    \n\n    useEffect(() => {\n        if (!correctLetters.includes(null) && correctLetters.length !== 0) {\n            dispatch(setIsEndOfGame(true));\n            dispatch(setIsPlayerWon(true));\n        }\n    }, [correctLetters, setIsEndOfGame, setIsPlayerWon])    \n    \n\n    return (\n    <StyleWrapper id=\"correct-letters\" className=\"styled-div\">\n        {correctLetters.map(letter => \n            <CorrectLetter key={uuidv4()} letter={letter}/> \n            )}  \n    </StyleWrapper>\n    )\n}\n\nexport default CorrectLetters;\n\nconst StyleWrapper = styled.div`\n    flex: 4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/app/store.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/vocabulary/vocabularySlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/wordsSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/gameStatusSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/letters/correctLettersSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/letters/wrongLettersSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/letters/isLastlyGuessedLetterWrongSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/WordGenerator.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":52,"column":8,"nodeType":"121","endLine":52,"endColumn":23,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":26,"column":8,"nodeType":"121","endLine":26,"endColumn":10,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"120","line":30,"column":8,"nodeType":"121","endLine":30,"endColumn":10,"suggestions":"125"},{"ruleId":"119","severity":1,"message":"126","line":35,"column":8,"nodeType":"121","endLine":36,"endColumn":68,"suggestions":"127"},{"ruleId":"119","severity":1,"message":"128","line":54,"column":8,"nodeType":"121","endLine":54,"endColumn":23,"suggestions":"129"},{"ruleId":"119","severity":1,"message":"130","line":70,"column":8,"nodeType":"121","endLine":70,"endColumn":21,"suggestions":"131"},{"ruleId":"119","severity":1,"message":"132","line":20,"column":8,"nodeType":"121","endLine":20,"endColumn":56,"suggestions":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["136"],"React Hook useEffect has missing dependencies: 'dispatch' and 'generatedWord'. Either include them or remove the dependency array.",["137"],["138"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array. Outer scope values like 'setIsEndOfGame' aren't valid dependencies because mutating them doesn't re-render the component.",["139"],"React Hook useEffect has a missing dependency: 'clearDrawing'. Either include it or remove the dependency array.",["140"],"React Hook useEffect has a missing dependency: 'redraw'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'setIsEndOfGame' aren't valid dependencies because mutating them doesn't re-render the component.",["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"143","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [dispatch, generatedWord]",{"range":"156","text":"157"},{"range":"158","text":"157"},"Update the dependencies array to be: [dispatch]",{"range":"159","text":"160"},"Update the dependencies array to be: [drawingParts, wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, draw]",{"range":"161","text":"162"},"Update the dependencies array to be: [clearDrawing, generatedWord]",{"range":"163","text":"164"},"Update the dependencies array to be: [currentPath, redraw]",{"range":"165","text":"166"},"Update the dependencies array to be: [correctLetters, dispatch]",{"range":"167","text":"168"},[2496,2511],"[dispatch, generatedWord]",[1131,1133],[1208,1210],"[dispatch]",[1263,1388],"[drawingParts, wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, draw]",[1893,1908],"[clearDrawing, generatedWord]",[2335,2348],"[currentPath, redraw]",[643,691],"[correctLetters, dispatch]"]