[{"/home/mate/Advanced/hangman-using-redux/src/index.js":"1","/home/mate/Advanced/hangman-using-redux/src/App.js":"2","/home/mate/Advanced/hangman-using-redux/src/components/Header.js":"3","/home/mate/Advanced/hangman-using-redux/src/components/Content.js":"4","/home/mate/Advanced/hangman-using-redux/src/context/VocabularyContext.js":"5","/home/mate/Advanced/hangman-using-redux/src/context/GameStatusContext.js":"6","/home/mate/Advanced/hangman-using-redux/src/context/DrawingContext.js":"7","/home/mate/Advanced/hangman-using-redux/src/context/LettersContext.js":"8","/home/mate/Advanced/hangman-using-redux/src/components/Game.js":"9","/home/mate/Advanced/hangman-using-redux/src/components/Vocabulary.js":"10","/home/mate/Advanced/hangman-using-redux/src/components/Drawing.js":"11","/home/mate/Advanced/hangman-using-redux/src/components/GameEndingFeedback.js":"12","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetters.js":"13","/home/mate/Advanced/hangman-using-redux/src/components/letters/GuessedLetter.js":"14","/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetters.js":"15","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetter.js":"16","/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetter.js":"17","/home/mate/Advanced/hangman-using-redux/src/app/store.js":"18","/home/mate/Advanced/hangman-using-redux/src/features/vocabulary/vocabularySlice.js":"19"},{"size":292,"mtime":1609926411105,"results":"20","hashOfConfig":"21"},{"size":1050,"mtime":1609858891245,"results":"22","hashOfConfig":"21"},{"size":1210,"mtime":1609858891245,"results":"23","hashOfConfig":"21"},{"size":614,"mtime":1609858891245,"results":"24","hashOfConfig":"21"},{"size":1582,"mtime":1609926907280,"results":"25","hashOfConfig":"21"},{"size":797,"mtime":1609858891245,"results":"26","hashOfConfig":"21"},{"size":518,"mtime":1609858891245,"results":"27","hashOfConfig":"21"},{"size":2681,"mtime":1609858891245,"results":"28","hashOfConfig":"21"},{"size":1370,"mtime":1609858891245,"results":"29","hashOfConfig":"21"},{"size":2406,"mtime":1609858891245,"results":"30","hashOfConfig":"21"},{"size":4451,"mtime":1609858891245,"results":"31","hashOfConfig":"21"},{"size":1618,"mtime":1609858891245,"results":"32","hashOfConfig":"21"},{"size":763,"mtime":1609858891245,"results":"33","hashOfConfig":"21"},{"size":1963,"mtime":1609925966280,"results":"34","hashOfConfig":"21"},{"size":1086,"mtime":1609858891245,"results":"35","hashOfConfig":"21"},{"size":477,"mtime":1609858891245,"results":"36","hashOfConfig":"21"},{"size":836,"mtime":1609858891245,"results":"37","hashOfConfig":"21"},{"size":216,"mtime":1609925942104,"results":"38","hashOfConfig":"21"},{"size":414,"mtime":1609927140640,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u7h8ov",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mate/Advanced/hangman-using-redux/src/index.js",[],"/home/mate/Advanced/hangman-using-redux/src/App.js",[],["81","82"],"/home/mate/Advanced/hangman-using-redux/src/components/Header.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Content.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/VocabularyContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/GameStatusContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/DrawingContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/LettersContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Game.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Vocabulary.js",["83"],"import React, {useContext, useEffect} from 'react';\nimport {VocabularyContext} from '../context/VocabularyContext';\nimport styled from 'styled-components';\nimport englishFlag from '../images/english_flag.png';\nimport germanFlag from '../images/german_flag.png';\n\nconst Vocabulary = () => {\n\n    const {generateWord, generatedWord, vocabulary, \n        setWordBeforeVisitingVocabularies} = useContext(VocabularyContext);\n\n    useEffect(() => {\n        setWordBeforeVisitingVocabularies(generatedWord);\n    }, [])\n\n\n    useEffect(() => {\n    }, [vocabulary])\n\n    return (\n        <StyleWrapper>\n            <div id=\"chosen-vocabulary\" className=\"vocabulary-container\">\n                <h2>Chosen vocabulary: {vocabulary}</h2>\n            </div>\n            <div id=\"available-vocabularies\" className=\"vocabulary-container\">\n                <h2>Available vocabularies:</h2>\n                <button type=\"button\" className=\"flag-button\"  onClick={generateWord}>\n                    <StyledFlag src={englishFlag} alt=\"English vocabulary\" data-vocabulary=\"English\"></StyledFlag>\n                </button>\n                <button type=\"button\" className=\"flag-button\" onClick={generateWord}>\n                    <StyledFlag src={germanFlag} alt=\"German vocabulary\" data-vocabulary=\"German\"></StyledFlag>\n                </button>\n            </div>\n        </StyleWrapper>\n    );\n};\n\nexport default Vocabulary;\n\n\nconst StyledFlag = styled.img`\n    width: 160px;\n    height: 80px;\n    cursor: pointer;\n    border: 0;\n\n    @media screen and (min-width: 768px) {\n        \n    }\n`;\n\nconst StyleWrapper = styled.div`\n    width: 100%;\n    background-color: #383961;\n    display: flex;\n    flex-direction: column;\n\n    .vocabulary-container {\n        margin: 5%;\n    }\n\n    h2 {\n        margin-top: 5%;\n    }\n\n    #available-vocabularies {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    \n    @media screen and (min-width: 540px) {\n        font-size: 120%;\n        .vocabulary-container {\n            margin: 5%;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n    }    \n    \n    @media screen and (min-width: 992px) {\n        font-size: 150%;\n        .vocabulary-container {\n            margin: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n    }\n`;\n","/home/mate/Advanced/hangman-using-redux/src/components/Drawing.js",["84","85","86","87"],"import React, {useContext, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {VocabularyContext} from '../context/VocabularyContext';\nimport {GameStatusContext} from '../context/GameStatusContext';\nimport {DrawingContext} from '../context/DrawingContext';\nimport {LettersContext} from '../context/LettersContext';\nimport {useLocation} from 'react-router-dom';\n\nconst Drawing = () => {\n\n    const {generatedWord, wordBeforeVisitingVocabularies} = useContext(VocabularyContext);\n    const {isEndOfGame, setIsEndOfGame} = useContext(GameStatusContext);\n    const {drawingParts, indexOfDrawingParts, \n        setIndexOfDrawingParts} = useContext(DrawingContext);\n    const {wrongLetters, isLastlyGuessedLetterWrong, \n        setIsLastlyGuessedLetterWrong} = useContext(LettersContext);\n\n    let location = useLocation();\n    let currentPath = location.pathname;\n\n    useEffect(() => {\n        return () => {\n            setIsLastlyGuessedLetterWrong(false);\n        }\n    }, [])\n    \n\n    useEffect(() => {\n        draw();\n    }, [drawingParts, wrongLetters, isLastlyGuessedLetterWrong, \n        isEndOfGame, setIsEndOfGame, setIsLastlyGuessedLetterWrong])\n\n    const draw = () => {\n        if (!isEndOfGame && isLastlyGuessedLetterWrong) {\n            drawingParts[indexOfDrawingParts].classList.add(\"draw\");\n            if (drawingParts[indexOfDrawingParts + 1] === undefined) {\n                setIsEndOfGame(true);\n                setIsLastlyGuessedLetterWrong(false);\n            } else {\n                setIndexOfDrawingParts(index => index + 1);\n            }\n        }\n    }\n\n\n    useEffect(() => {\n        clearDrawing();\n    }, [generatedWord])\n\n    const clearDrawing = () => {\n        if (wordBeforeVisitingVocabularies !== generatedWord) {\n            for (let i = 0; i < drawingParts.length; i++) {\n                drawingParts[i].classList.remove(\"draw\");\n            setIndexOfDrawingParts(0);\n            }\n        }\n    }\n    \n\n    useEffect(() => {\n        redraw();\n    }, [currentPath])\n\n    const redraw = () => {\n        if (currentPath === \"/\" && wordBeforeVisitingVocabularies === generatedWord) {\n            for (let i = 0; i < indexOfDrawingParts; i++) {\n                drawingParts[i].classList.add(\"draw\");\n            }\n            setIndexOfDrawingParts(indexOfDrawingParts);\n        }\n    } \n\n\n    return <StyleWrapper id=\"drawing\" className=\"styled-div\">\n                <svg height=\"250\" width=\"100%\" id=\"drawing-parts\">\n                    <g id=\"gallows\">\n                        <line x1=\"10\" y1=\"230\" x2=\"270\" y2=\"230\" className=\"drawing-part\"/>\n                        <line x1=\"100\" y1=\"230\" x2=\"100\" y2=\"20\" className=\"drawing-part\"/>\n                        <line x1=\"100\" y1=\"20\" x2=\"200\" y2=\"20\" className=\"drawing-part\"/>\n                        <line id=\"rope\" x1=\"200\" y1=\"20\" x2=\"200\" y2=\"60\" className=\"drawing-part\"/>\n                    </g>\n                    <g id=\"body\">\n                        <circle cx=\"200\" cy=\"80\" r=\"20\" stroke=\"white\" strokeWidth=\"4\" fill=\"white\" className=\"drawing-part\"/>\n                        <line x1=\"200\" y1=\"100\" x2=\"200\" y2=\"150\" className=\"drawing-part\"/>\n                        <line id=\"armL\" x1=\"200\" y1=\"120\" x2=\"170\" y2=\"140\" className=\"drawing-part\"/>\n                        <line id=\"armR\" x1=\"200\" y1=\"120\" x2=\"230\" y2=\"140\" className=\"drawing-part\"/>\n                        <line id=\"legL\" x1=\"200\" y1=\"150\" x2=\"180\" y2=\"190\" className=\"drawing-part\"/>\n                        <line id=\"legR\" x1=\"200\" y1=\"150\" x2=\"220\" y2=\"190\" className=\"drawing-part\"/>\n                    </g>\n                </svg>\n    </StyleWrapper>\n}\n\nexport default Drawing;\n\nconst StyleWrapper = styled.div`\n    flex: 5;\n    border-top: 1px solid white;\n    border-bottom: 1px solid white;\n    margin: 3% 0;\n\n    svg {\n        margin: 0 auto;\n    }\n    \n    line {\n        stroke: white;\n        stroke-width: 4;\n    }\n\n    .drawing-part {\n        visibility: hidden;\n    }\n    \n    .draw {\n        visibility: visible;\n    }\n\n    @media screen and (min-width: 540px) {\n        svg {\n            box-sizing: content-box;\n            width: 50%;\n            padding: 10% 0 0 20%;\n        }\n    }\n\n    @media screen and (min-width: 992px) {\n        border-top: none;\n        border-bottom: none;\n        position: relative;\n\n        svg {\n            box-sizing: content-box;\n            width: 50%;\n            padding: 15% 0 0 40%;\n        }\n    }\n`;","/home/mate/Advanced/hangman-using-redux/src/components/GameEndingFeedback.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetters.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/GuessedLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetters.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/app/store.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/vocabulary/vocabularySlice.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":14,"column":8,"nodeType":"94","endLine":14,"endColumn":10,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":25,"column":8,"nodeType":"94","endLine":25,"endColumn":10,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"98","line":30,"column":8,"nodeType":"94","endLine":31,"endColumn":68,"suggestions":"99"},{"ruleId":"92","severity":1,"message":"100","line":48,"column":8,"nodeType":"94","endLine":48,"endColumn":23,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":62,"column":8,"nodeType":"94","endLine":62,"endColumn":21,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'generatedWord' and 'setWordBeforeVisitingVocabularies'. Either include them or remove the dependency array.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'setIsLastlyGuessedLetterWrong'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'clearDrawing'. Either include it or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'redraw'. Either include it or remove the dependency array.",["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [generatedWord, setWordBeforeVisitingVocabularies]",{"range":"121","text":"122"},"Update the dependencies array to be: [setIsLastlyGuessedLetterWrong]",{"range":"123","text":"124"},"Update the dependencies array to be: [drawingParts, wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, setIsEndOfGame, setIsLastlyGuessedLetterWrong, draw]",{"range":"125","text":"126"},"Update the dependencies array to be: [clearDrawing, generatedWord]",{"range":"127","text":"128"},"Update the dependencies array to be: [currentPath, redraw]",{"range":"129","text":"130"},[508,510],"[generatedWord, setWordBeforeVisitingVocabularies]",[993,995],"[setIsLastlyGuessedLetterWrong]",[1048,1173],"[drawingParts, wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, setIsEndOfGame, setIsLastlyGuessedLetterWrong, draw]",[1657,1672],"[clearDrawing, generatedWord]",[2012,2025],"[currentPath, redraw]"]