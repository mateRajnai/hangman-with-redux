[{"/home/mate/Advanced/hangman-using-redux/src/index.js":"1","/home/mate/Advanced/hangman-using-redux/src/App.js":"2","/home/mate/Advanced/hangman-using-redux/src/components/Header.js":"3","/home/mate/Advanced/hangman-using-redux/src/components/Content.js":"4","/home/mate/Advanced/hangman-using-redux/src/context/VocabularyContext.js":"5","/home/mate/Advanced/hangman-using-redux/src/context/GameStatusContext.js":"6","/home/mate/Advanced/hangman-using-redux/src/context/DrawingContext.js":"7","/home/mate/Advanced/hangman-using-redux/src/context/LettersContext.js":"8","/home/mate/Advanced/hangman-using-redux/src/components/Game.js":"9","/home/mate/Advanced/hangman-using-redux/src/components/Vocabulary.js":"10","/home/mate/Advanced/hangman-using-redux/src/components/Drawing.js":"11","/home/mate/Advanced/hangman-using-redux/src/components/GameEndingFeedback.js":"12","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetters.js":"13","/home/mate/Advanced/hangman-using-redux/src/components/letters/GuessedLetter.js":"14","/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetters.js":"15","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetter.js":"16","/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetter.js":"17","/home/mate/Advanced/hangman-using-redux/src/app/store.js":"18","/home/mate/Advanced/hangman-using-redux/src/features/vocabulary/vocabularySlice.js":"19","/home/mate/Advanced/hangman-using-redux/src/features/wordsSlice.js":"20","/home/mate/Advanced/hangman-using-redux/src/features/gameStatusSlice.js":"21","/home/mate/Advanced/hangman-using-redux/src/features/letters/correctLettersSlice.js":"22","/home/mate/Advanced/hangman-using-redux/src/features/letters/wrongLettersSlice.js":"23","/home/mate/Advanced/hangman-using-redux/src/components/WordGenerator.js":"24","/home/mate/Advanced/hangman-using-redux/src/features/letters/guessedLetterPropertiesSlice.js":"25"},{"size":292,"mtime":1609926411105,"results":"26","hashOfConfig":"27"},{"size":1050,"mtime":1609858891245,"results":"28","hashOfConfig":"27"},{"size":1210,"mtime":1609858891245,"results":"29","hashOfConfig":"27"},{"size":614,"mtime":1609858891245,"results":"30","hashOfConfig":"27"},{"size":1426,"mtime":1610368614236,"results":"31","hashOfConfig":"27"},{"size":1009,"mtime":1610363002917,"results":"32","hashOfConfig":"27"},{"size":518,"mtime":1609858891245,"results":"33","hashOfConfig":"27"},{"size":1522,"mtime":1610372533189,"results":"34","hashOfConfig":"27"},{"size":1370,"mtime":1609858891245,"results":"35","hashOfConfig":"27"},{"size":3075,"mtime":1610370167467,"results":"36","hashOfConfig":"27"},{"size":4752,"mtime":1610372389443,"results":"37","hashOfConfig":"27"},{"size":2242,"mtime":1610369758732,"results":"38","hashOfConfig":"27"},{"size":741,"mtime":1610360677731,"results":"39","hashOfConfig":"27"},{"size":3788,"mtime":1610374245800,"results":"40","hashOfConfig":"27"},{"size":1078,"mtime":1610363022567,"results":"41","hashOfConfig":"27"},{"size":477,"mtime":1609858891245,"results":"42","hashOfConfig":"27"},{"size":836,"mtime":1609858891245,"results":"43","hashOfConfig":"27"},{"size":796,"mtime":1610372420138,"results":"44","hashOfConfig":"27"},{"size":414,"mtime":1609929889183,"results":"45","hashOfConfig":"27"},{"size":696,"mtime":1610355166819,"results":"46","hashOfConfig":"27"},{"size":594,"mtime":1610356602330,"results":"47","hashOfConfig":"27"},{"size":411,"mtime":1610360612262,"results":"48","hashOfConfig":"27"},{"size":489,"mtime":1610361085610,"results":"49","hashOfConfig":"27"},{"size":451,"mtime":1610369746779,"results":"50","hashOfConfig":"27"},{"size":594,"mtime":1610372701989,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"u7h8ov",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/mate/Advanced/hangman-using-redux/src/index.js",[],["107","108"],"/home/mate/Advanced/hangman-using-redux/src/App.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Header.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Content.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/VocabularyContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/GameStatusContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/DrawingContext.js",[],"/home/mate/Advanced/hangman-using-redux/src/context/LettersContext.js",["109","110","111","112"],"import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {setCorrectLetters} from '../features/letters/correctLettersSlice';\nimport {addWrongLetter, clearWrongLetters} from '../features/letters/wrongLettersSlice';\nimport {isLastlyGuessedLetterWrong} from '../features/letters/guessedLetterPropertiesSlice';\n\nexport const LettersContext = React.createContext();\n\nexport const LettersProvider = (props) => {\n\n    const generatedWord = useSelector(state => state.words.generatedWord);\n    const correctLetters = useSelector(state => state.correctLetters);\n    const wrongLetters = useSelector(state => state.wrongLetters);\n    const isLastlyGuessedLetterWrong = useSelector(state => state.isLastlyGuessedLetterWrong)\n    const dispatch = useDispatch();\n\n    \n\n    useEffect(() => {\n        dispatch(setCorrectLetters(createArrayContainingNullsWithLengthOf(generatedWord.length)));\n        dispatch(clearWrongLetters());\n    }, [generatedWord])\n\n    const createArrayContainingNullsWithLengthOf = (length) => {\n        let array = [];\n        for (let i = 0; i < length; i++) {\n            array[i] = null;\n        }\n        return array;\n    }\n\n    return (\n        <LettersContext.Provider value={{\n            // checkGuessedLetterWasAlreadyGuessed,\n            correctLetters,\n            wrongLetters,\n            // isLastlyGuessedLetterWrong,\n            // setIsLastlyGuessedLetterWrong\n        }} >\n            {props.children}\n        </LettersContext.Provider>\n    );\n};\n","/home/mate/Advanced/hangman-using-redux/src/components/Game.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/Vocabulary.js",["113"],"import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport englishFlag from '../images/english_flag.png';\nimport germanFlag from '../images/german_flag.png';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setVocabulary} from '../features/vocabulary/vocabularySlice';\nimport {setGeneratedWord, setWordBeforeVisitingVocabularies} from '../features/wordsSlice';\nimport WordGenerator from './WordGenerator';\n\nconst Vocabulary = () => {\n\n    const generatedWord = useSelector(state => state.words.generatedWord);\n    const vocabulary = useSelector(state => state.vocabulary)\n    const dispatch = useDispatch();\n\n    const startNewGameAfterChangingVocabulary = (event) => {\n        const chosenVocabulary = event.target.getAttribute(\"data-vocabulary\") || vocabulary;\n        dispatch(setVocabulary(chosenVocabulary));\n        dispatch(setWordBeforeVisitingVocabularies(generatedWord));\n        let word = WordGenerator.generate(chosenVocabulary);\n        dispatch(setGeneratedWord(word)); \n    }\n\n    useEffect(() => {\n        dispatch(setWordBeforeVisitingVocabularies(generatedWord));\n    }, [])\n\n\n    useEffect(() => {\n    }, [vocabulary])\n\n    return (\n        <StyleWrapper>\n            <div id=\"chosen-vocabulary\" className=\"vocabulary-container\">\n                <h2>Chosen vocabulary: {vocabulary}</h2>\n            </div>\n            <div id=\"available-vocabularies\" className=\"vocabulary-container\">\n                <h2>Available vocabularies:</h2>\n                <button type=\"button\" className=\"flag-button\"  onClick={startNewGameAfterChangingVocabulary}>\n                    <StyledFlag src={englishFlag} alt=\"English vocabulary\" data-vocabulary=\"English\"></StyledFlag>\n                </button>\n                <button type=\"button\" className=\"flag-button\" onClick={startNewGameAfterChangingVocabulary}>\n                    <StyledFlag src={germanFlag} alt=\"German vocabulary\" data-vocabulary=\"German\"></StyledFlag>\n                </button>\n            </div>\n        </StyleWrapper>\n    );\n};\n\nexport default Vocabulary;\n\n\nconst StyledFlag = styled.img`\n    width: 160px;\n    height: 80px;\n    cursor: pointer;\n    border: 0;\n\n    @media screen and (min-width: 768px) {\n        \n    }\n`;\n\nconst StyleWrapper = styled.div`\n    width: 100%;\n    background-color: #383961;\n    display: flex;\n    flex-direction: column;\n\n    .vocabulary-container {\n        margin: 5%;\n    }\n\n    h2 {\n        margin-top: 5%;\n    }\n\n    #available-vocabularies {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    \n    @media screen and (min-width: 540px) {\n        font-size: 120%;\n        .vocabulary-container {\n            margin: 5%;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n    }    \n    \n    @media screen and (min-width: 992px) {\n        font-size: 150%;\n        .vocabulary-container {\n            margin: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n    }\n`;\n","/home/mate/Advanced/hangman-using-redux/src/components/Drawing.js",["114","115","116","117"],"import React, {useContext, useEffect} from 'react';\nimport styled from 'styled-components';\nimport {DrawingContext} from '../context/DrawingContext';\nimport {useLocation} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setIsEndOfGame} from '../features/gameStatusSlice';\nimport {setIsGuessedLetterWrong} from '../features/letters/guessedLetterPropertiesSlice';\n\nconst Drawing = () => {\n\n\n    const {drawingParts, indexOfDrawingParts, \n        setIndexOfDrawingParts} = useContext(DrawingContext);\n\n    const generatedWord = useSelector(state => state.words.generatedWord);\n    const wordBeforeVisitingVocabularies = useSelector(state => state.words.wordBeforeVisitingVocabularies);\n    const wrongLetters = useSelector(state => state.wrongLetters);\n    const isLastlyGuessedLetterWrong = useSelector(state => state.guessedLetterProperties.isWrong);\n    const isEndOfGame = useSelector(state => state.gameStatus.isEndOfGame);\n    \n    const dispatch = useDispatch();\n\n    let location = useLocation();\n    let currentPath = location.pathname;\n\n    useEffect(() => {\n        return () => {\n            dispatch(setIsGuessedLetterWrong(false));\n        }\n    }, [])\n    \n\n    useEffect(() => {\n        draw();\n    }, [drawingParts, wrongLetters, isLastlyGuessedLetterWrong, \n        isEndOfGame, setIsEndOfGame, setIsGuessedLetterWrong])\n\n    const draw = () => {\n        if (!isEndOfGame && isLastlyGuessedLetterWrong) {\n            drawingParts[indexOfDrawingParts].classList.add(\"draw\");\n            if (drawingParts[indexOfDrawingParts + 1] === undefined) {\n                dispatch(setIsEndOfGame(true));\n                dispatch(setIsGuessedLetterWrong(false));\n            } else {\n                setIndexOfDrawingParts(index => index + 1);\n            }\n        }\n    }\n\n\n    useEffect(() => {\n\n        clearDrawing();\n    }, [generatedWord])\n\n    const clearDrawing = () => {\n        console.log(generatedWord)\n        console.log(wordBeforeVisitingVocabularies)\n        if (wordBeforeVisitingVocabularies !== generatedWord) {\n            for (let i = 0; i < drawingParts.length; i++) {\n                drawingParts[i].classList.remove(\"draw\");\n            setIndexOfDrawingParts(0);\n            }\n        }\n    }\n    \n\n    useEffect(() => {\n        redraw();\n    }, [currentPath])\n\n    const redraw = () => {\n        if (currentPath === \"/\" && wordBeforeVisitingVocabularies === generatedWord) {\n            for (let i = 0; i < indexOfDrawingParts; i++) {\n                drawingParts[i].classList.add(\"draw\");\n            }\n            setIndexOfDrawingParts(indexOfDrawingParts);\n        }\n    } \n\n\n    return <StyleWrapper id=\"drawing\" className=\"styled-div\">\n                <svg height=\"250\" width=\"100%\" id=\"drawing-parts\">\n                    <g id=\"gallows\">\n                        <line x1=\"10\" y1=\"230\" x2=\"270\" y2=\"230\" className=\"drawing-part\"/>\n                        <line x1=\"100\" y1=\"230\" x2=\"100\" y2=\"20\" className=\"drawing-part\"/>\n                        <line x1=\"100\" y1=\"20\" x2=\"200\" y2=\"20\" className=\"drawing-part\"/>\n                        <line id=\"rope\" x1=\"200\" y1=\"20\" x2=\"200\" y2=\"60\" className=\"drawing-part\"/>\n                    </g>\n                    <g id=\"body\">\n                        <circle cx=\"200\" cy=\"80\" r=\"20\" stroke=\"white\" strokeWidth=\"4\" fill=\"white\" className=\"drawing-part\"/>\n                        <line x1=\"200\" y1=\"100\" x2=\"200\" y2=\"150\" className=\"drawing-part\"/>\n                        <line id=\"armL\" x1=\"200\" y1=\"120\" x2=\"170\" y2=\"140\" className=\"drawing-part\"/>\n                        <line id=\"armR\" x1=\"200\" y1=\"120\" x2=\"230\" y2=\"140\" className=\"drawing-part\"/>\n                        <line id=\"legL\" x1=\"200\" y1=\"150\" x2=\"180\" y2=\"190\" className=\"drawing-part\"/>\n                        <line id=\"legR\" x1=\"200\" y1=\"150\" x2=\"220\" y2=\"190\" className=\"drawing-part\"/>\n                    </g>\n                </svg>\n    </StyleWrapper>\n}\n\nexport default Drawing;\n\nconst StyleWrapper = styled.div`\n    flex: 5;\n    border-top: 1px solid white;\n    border-bottom: 1px solid white;\n    margin: 3% 0;\n\n    svg {\n        margin: 0 auto;\n    }\n    \n    line {\n        stroke: white;\n        stroke-width: 4;\n    }\n\n    .drawing-part {\n        visibility: hidden;\n    }\n    \n    .draw {\n        visibility: visible;\n    }\n\n    @media screen and (min-width: 540px) {\n        svg {\n            box-sizing: content-box;\n            width: 50%;\n            padding: 10% 0 0 20%;\n        }\n    }\n\n    @media screen and (min-width: 992px) {\n        border-top: none;\n        border-bottom: none;\n        position: relative;\n\n        svg {\n            box-sizing: content-box;\n            width: 50%;\n            padding: 15% 0 0 40%;\n        }\n    }\n`;","/home/mate/Advanced/hangman-using-redux/src/components/GameEndingFeedback.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetters.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/GuessedLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetters.js",["118"],"import React, {useEffect} from 'react';\nimport styled from 'styled-components';\nimport {v4 as uuidv4} from 'uuid';\nimport CorrectLetter from './CorrectLetter';\nimport {setIsPlayerWon, setIsEndOfGame} from '../../features/gameStatusSlice';\nimport {useDispatch, useSelector} from 'react-redux';\n\nconst CorrectLetters = () => {\n\n    const correctLetters = useSelector(state => state.correctLetters)\n    const dispatch = useDispatch();\n\n    \n\n    useEffect(() => {\n        if (!correctLetters.includes(null) && correctLetters.length !== 0) {\n            dispatch(setIsEndOfGame(true));\n            dispatch(setIsPlayerWon(true));\n        }\n    }, [correctLetters, setIsEndOfGame, setIsPlayerWon])    \n    \n\n    return (\n    <StyleWrapper id=\"correct-letters\" className=\"styled-div\">\n        {correctLetters.map(letter => \n            <CorrectLetter key={uuidv4()} letter={letter}/> \n            )}  \n    </StyleWrapper>\n    )\n}\n\nexport default CorrectLetters;\n\nconst StyleWrapper = styled.div`\n    flex: 4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;","/home/mate/Advanced/hangman-using-redux/src/components/letters/WrongLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/letters/CorrectLetter.js",[],"/home/mate/Advanced/hangman-using-redux/src/app/store.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/vocabulary/vocabularySlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/wordsSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/gameStatusSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/letters/correctLettersSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/letters/wrongLettersSlice.js",[],"/home/mate/Advanced/hangman-using-redux/src/components/WordGenerator.js",[],"/home/mate/Advanced/hangman-using-redux/src/features/letters/guessedLetterPropertiesSlice.js",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":4,"column":9,"nodeType":"125","messageId":"126","endLine":4,"endColumn":23},{"ruleId":"123","severity":1,"message":"127","line":5,"column":9,"nodeType":"125","messageId":"126","endLine":5,"endColumn":35},{"ruleId":"123","severity":1,"message":"128","line":14,"column":11,"nodeType":"125","messageId":"126","endLine":14,"endColumn":37},{"ruleId":"129","severity":1,"message":"130","line":22,"column":8,"nodeType":"131","endLine":22,"endColumn":23,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":26,"column":8,"nodeType":"131","endLine":26,"endColumn":10,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"130","line":30,"column":8,"nodeType":"131","endLine":30,"endColumn":10,"suggestions":"135"},{"ruleId":"129","severity":1,"message":"136","line":35,"column":8,"nodeType":"131","endLine":36,"endColumn":62,"suggestions":"137"},{"ruleId":"129","severity":1,"message":"138","line":54,"column":8,"nodeType":"131","endLine":54,"endColumn":23,"suggestions":"139"},{"ruleId":"129","severity":1,"message":"140","line":70,"column":8,"nodeType":"131","endLine":70,"endColumn":21,"suggestions":"141"},{"ruleId":"129","severity":1,"message":"142","line":20,"column":8,"nodeType":"131","endLine":20,"endColumn":56,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'addWrongLetter' is defined but never used.","Identifier","unusedVar","'isLastlyGuessedLetterWrong' is defined but never used.","'isLastlyGuessedLetterWrong' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has missing dependencies: 'dispatch' and 'generatedWord'. Either include them or remove the dependency array.",["147"],["148"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array. Outer scope values like 'setIsEndOfGame' aren't valid dependencies because mutating them doesn't re-render the component.",["149"],"React Hook useEffect has a missing dependency: 'clearDrawing'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'redraw'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. Outer scope values like 'setIsEndOfGame' aren't valid dependencies because mutating them doesn't re-render the component.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"153","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [dispatch, generatedWord]",{"range":"166","text":"167"},{"range":"168","text":"167"},"Update the dependencies array to be: [dispatch]",{"range":"169","text":"170"},"Update the dependencies array to be: [drawingParts, wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, draw]",{"range":"171","text":"172"},"Update the dependencies array to be: [clearDrawing, generatedWord]",{"range":"173","text":"174"},"Update the dependencies array to be: [currentPath, redraw]",{"range":"175","text":"176"},"Update the dependencies array to be: [correctLetters, dispatch]",{"range":"177","text":"178"},[968,983],"[dispatch, generatedWord]",[1131,1133],[1198,1200],"[dispatch]",[1253,1372],"[drawingParts, wrongLetters, isLastlyGuessedLetterWrong, isEndOfGame, draw]",[1871,1886],"[clearDrawing, generatedWord]",[2313,2326],"[currentPath, redraw]",[643,691],"[correctLetters, dispatch]"]